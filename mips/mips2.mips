# programming macros
.include "prog.mips"

# constant definitions (opcodes, funcs, etc.)
# macros for extracting register-numbers, etc.
.include "instr.mips"

# macros for accessing memory, PC, simulated registers
.include "mem.mips"

# defines the character codes
.include "bmem-map.mips"

# assembled programs in labeled .data blocks
# .include "<sample_mips>.hex"
.include "iter-fact-12.hex" # iterfact12
.include "rec-fact-12.hex" # recfact12
.include "iter-fib-47.hex" # iterfib47
.include "rec-fib-12.hex" # recfib12
.include "bubble-sort.hex" # bubblesort

.data
mode: .word 0

.eqv K_0 1
.eqv K_1 2
.eqv K_2 3
.eqv K_3 4
.eqv K_4 5
.eqv K_5 6

.eqv K_SPC 1
.eqv K_K 2

# main program
.text
li $sp 0x10011000 # stack start on hardware with 1024 words of data memory
menu: # {{{
    # wait until key pressed
    menu_key_loop: jal get_key
                   beq $v0 $0 menu_key_loop
    case $v0 K_0 toggle_mode
    case $v0 K_1 run_iterfact12
    case $v0 K_2 run_recfact12
    case $v0 K_3 run_iterfib47
    case $v0 K_4 run_recfib12
    case $v0 K_5 run_bubblesort
    case key_default

    toggle_mode:
        lw $t0 mode
        not $t0 $t0
        sw $t0 mode
        j menu
    run_iterfact12:
        la $t0 iterfact12
        case_break key_end
    run_recfact12:
        la $t0 recfact12
        case_break key_end
    run_iterfib47:
        la $t0 iterfib47
        case_break key_end
    run_recfib12:
        la $t0 recfib12
        case_break key_end
    run_bubblesort:
        la $t0 bubblesort
        case_break key_end
    key_default:
        j error
    key_end:
        sw $t0 progbase
        jal interpreter
    j menu # }}}

interpreter: # {{{
    subi $sp $sp 8
    # BADWRONG! WRONGBAD! Save stuff like this on the stack! But…
    # the interpreter is "stackless" precisely becuase we can't control the
    # interpreted program's use of the stack… So we can't even *restore* from
    # the stack!
    #
    # instead, use some un-used registers for these very important pieces
    #
    # double check that there are only two usages:
    # git grep -o '\$s[[:digit:]]' mips/mips2.mips | cut -d: -f4 | sort | uniq -c
    move $s5 $ra
    move $s6 $sp
    move $s7 $fp
    reset_pc
    reset_mem
    interpreter_loop: # {{{
        l_instr $s0
        move $a0 $s0
        jal put_sound # will be 0 when ending

        screen_update: # {{{
        li $t0 0
        screen_update_reg_loop: # {{{
            bgei $t0 32 screen_update_reg_loop_end

            # $t1 = rf($t0)
            move $t1 $t0
            l_reg $t1 $t1
            # $t2 = grid column = $t0 mod 2 = $t0 & 1
            andi $t2 $t0 0x00000001
            # $t2 = screen column = 1 + (grid column * 28) = 1 + (gc << 4) + (gc << 3) + (gc << 2)
            # but display is L = 0x DDDD DDDD, so start at first D by adding 3
            sll $t8 $t2 4
            sll $t9 $t2 3
            add $t9 $t9 $t8
            sll $t8 $t2 2
            add $t2 $t9 $t8
            addi $t2 $t2 4
            # $t3 = screen row = grid row = $t0 div 2 = $t0 >> 1
            srl $t3 $t0 1

            jal screen_udpate_hexits

            # next register number
            addi $t0 $t0 1
            j screen_update_reg_loop
        screen_update_reg_loop_end: # }}}

        # PC = 0x DDDD DDDD
        # $t1 = PC
        l_pc $t1
        # $t2 = starting column = 4 (first D)
        li $t2 4
        # $t3 = next row
        addi $t3 $t3 1
        jal screen_udpate_hexits

        # INSTR = 0x DDDD DDDD
        # $t1 = instr
        move $t1 $s0
        # $t2 = starting column = 4 (first D)
        li $t2 4
        # $t3 = next row
        addi $t3 $t3 1
        jal screen_udpate_hexits
        # }}}

        # halt when instruction is 0x00000000
        beq $s0 $0 halt

        opcode $s0 $s1
        case $s1 0 DO_R

        # peel out pieces
        # $t0 = sign_ext_imm
        # $t1 = zero_ext_imm
        # $t2 = rs number
        # $t3 = rt number
        # $t4 = rf(rs)
        # $t5 = rf(rt)
        # $t6,7,8 free
        # $t9 = pc+4
        sign_ext_imm $s0 $t0
        zero_ext_imm $s0 $t1
        rs $s0 $t2
        rt $s0 $t3
        l_reg $t2 $t4
        l_reg $t3 $t5
        # reload these (modified in l_reg)
        rs $s0 $t2
        rt $s0 $t3
        l_pc $t9
        addi $t9 $t9 4

        .macro go_bt
            bt $s0 $t6
            s_pc $t6
        .end_macro
        .macro no_bt
            s_pc $t9
        .end_macro

        case $s1 OP_LW DO_LW
        case $s1 OP_SW DO_SW
        case $s1 OP_ADDI DO_ADDI
        case $s1 OP_ADDIU DO_ADDIU
        case $s1 OP_SLTI DO_SLTI
        case $s1 OP_SLTIU DO_SLTIU
        case $s1 OP_ORI DO_ORI
        case $s1 OP_LUI DO_LUI
        case $s1 OP_ANDI DO_ANDI
        case $s1 OP_XORI DO_XORI
        case $s1 OP_BEQ DO_BEQ
        case $s1 OP_BNE DO_BNE
        case $s1 OP_J DO_J
        case $s1 OP_JAL DO_JAL
        case op_default

        DO_LW: # {{{
            # l_data sign_ext_imm rs $t6
            l_data $t0 $t2 $t6
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_SW: # {{{
            # s_data sign_ext_imm rs rf(rt)
            s_data $t0 $t2 $t5
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_ADDI: # {{{
            # add $t6 sign_ext_imm rf(rs)
            add $t6 $t0 $t4
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_ADDIU: # {{{
            # addu $t6 sign_ext_imm rf(rs)
            addu $t6 $t0 $t4
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_SLTI: # {{{
            # slt $t6 rf(rs) sign_ext_imm
            slt $t6 $t4 $t0
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_SLTIU: # {{{
            # sltu $t6 rf(rs) sign_ext_imm
            sltu $t6 $t4 $t0
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_ORI: # {{{
            # or $t6 zero_ext_imm rf(rs)
            or $t6 $t1 $t4
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_LUI: # {{{
            # sll $t6 zero_ext_imm 16
            sll $t6 $t1 16
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_ANDI: # {{{
            # and $t6 zero_ext_imm rf(rs)
            and $t6 $t1 $t4
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_XORI: # {{{
            # xor $t6 zero_ext_imm rf(rs)
            xor $t6 $t1 $t4
            # s_reg rt $t6
            s_reg $t3 $t6
            # s_pc pc+4
            s_pc $t9
            case_break op_end # }}}
        DO_BEQ: # {{{
            # if beq rf(rs) rf(rt) go_bt no_bt
            if beq $t4 $t5 go_bt no_bt
            case_break op_end # }}}
        DO_BNE: # {{{
            # if bne rf(rs) rf(rt) go_bt no_bt
            if bne $t4 $t5 go_bt no_bt
            case_break op_end # }}}
        DO_J: # {{{
            # pc+4-4
            subi $t6 $t9 4
            # j_addr $s0 pc $t7
            j_addr $s0 $t6 $t7
            # s_pc $t7
            s_pc $t7
            case_break op_end # }}}
        DO_JAL: # {{{
            li $t6 REG_RA
            # s_reg 31 pc+4
            s_reg $t6 $t9
            j DO_J # }}}

        DO_R: # {{{
            # peel out pieces
            # $t0 = rd number
            # $t1 = rf(rd)
            # $t2 = rs number
            # $t3 = rt number
            # $t4 = rf(rs)
            # $t5 = rf(rt)
            # $t6 = shamt
            # $t7,8 free
            # $t9 = pc+4
            rd $s0 $t0
            l_reg $t0 $t1
            # reload
            rd $s0 $t0
            rs $s0 $t2
            rt $s0 $t3
            l_reg $t2 $t4
            l_reg $t3 $t5
            # reload
            rs $s0 $t2
            rt $s0 $t3
            shamt $s0 $t6
            l_pc $t9
            addi $t9 $t9 4

            funct $s0 $s1
            case $s1 FUNC_ADD DO_ADD
            case $s1 FUNC_ADDU DO_ADDU
            case $s1 FUNC_SUB DO_SUB
            case $s1 FUNC_AND DO_AND
            case $s1 FUNC_OR DO_OR
            case $s1 FUNC_XOR DO_XOR
            case $s1 FUNC_NOR DO_NOR
            case $s1 FUNC_SLT DO_SLT
            case $s1 FUNC_SLTU DO_SLTU
            case $s1 FUNC_SLL DO_SLL
            case $s1 FUNC_SLLV DO_SLLV
            case $s1 FUNC_SRL DO_SRL
            case $s1 FUNC_SRLV DO_SRLV
            case $s1 FUNC_SRA DO_SRA
            case $s1 FUNC_SRAV DO_SRAV
            case $s1 FUNC_JR DO_JR
            case $s1 FUNC_JALR DO_JALR
            case r_default

            DO_ADD: # {{{
                # add $t7 rf(rs) rf(rt)
                add $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_ADDU: # {{{
                # addu $t7 rf(rs) rf(rt)
                addu $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SUB: # {{{
                # sub $t7 rf(rs) rf(rt)
                sub $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_AND: # {{{
                # and $t7 rf(rs) rf(rt)
                and $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_OR: # {{{
                # or $t7 rf(rs) rf(rt)
                or $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_XOR: # {{{
                # xor $t7 rf(rs) rf(rt)
                xor $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_NOR: # {{{
                # nor $t7 rf(rs) rf(rt)
                nor $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SLT: # {{{
                # slt $t7 rf(rs) rf(rt)
                slt $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SLTU: # {{{
                # sltu $t7 rf(rs) rf(rt)
                sltu $t7 $t4 $t5
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SLL: # {{{
                # sllv because we don't know the shamt ($t0)
                # sllv $t7 rf(rt) shamt
                sllv $t7 $t5 $t6
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SLLV: # {{{
                # sllv $t7 rf(rt) rf(rs)
                sllv $t7 $t5 $t4
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SRL: # {{{
                # srlv $t7 rf(rt) shamt
                srlv $t7 $t5 $t6
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SRLV: # {{{
                # srlv $t7 rf(rt) rf(rs)
                srlv $t7 $t5 $t4
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SRA: # {{{
                # srav $t7 rf(rt) shamt
                srav $t7 $t5 $t6
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_SRAV: # {{{
                # srav $t7 rf(rt) rf(rs)
                srav $t7 $t5 $t4
                # s_reg rd $t7
                s_reg $t0 $t7
                # s_pc pc+4
                s_pc $t9
                case_break r_end # }}}
            DO_JR: # {{{
                jt $s0 $t7
                s_pc $t7
                case_break r_end # }}}
            DO_JALR: # {{{
                # store PC + 4 in $ra
                li $t7 REG_RA
                # s_reg 31 pc+4
                s_reg $t7 $t9
                j DO_JR # }}}

            r_default:
                j error
            r_end:
            case_break op_end # }}}

        op_default:
            j error
        op_end:
            lw $t0 mode
            beq $t0 $0 interpreter_continue
            interpreter_key_loop:
                jal get_key2
                beq $v0 $0 interpreter_key_loop
                case $v0 K_SPC interpreter_continue
                case $v0 K_K halt
                case error # default
            interpreter_continue:
                j interpreter_loop # }}}

    halt:
        # only relevant if we got here through K_K "kill"
        jal sound_off
        move $v0 $0
        # cf. BADWRONG! WRONGBAD!
        move $ra $s5
        move $sp $s6
        move $fp $s7
        addi $sp $sp 4
        jr $ra # }}}

# args
# $t1: value
# $t2: starting column
# $t3: row
################################################################################
# uses
# $t4: hexit number (1-8)
# $t5: mask
# $t6: shamt
# $t7: hexit
screen_udpate_hexits: # {{{
    # store $ra
    subi $sp $sp 4
    sw $ra 0($sp)
    # $t4 = hexit number = 1 to start
    li $t4 1
    # $t5 = mask = 0xF0000000 to start
    li $t5 0xF0000000
    # $t6 = shamt = 28 to start
    li $t6 28
    screen_update_hexit_loop: # {{{
        bgti $t4 8 screen_update_hexit_loop_end

        # $t7 = hexit
        and $t7 $t1 $t5
        srlv $t7 $t7 $t6
        # set $a0 to charcode for hexit
        case $t7 0x0 PUT_0
        case $t7 0x1 PUT_1
        case $t7 0x2 PUT_2
        case $t7 0x3 PUT_3
        case $t7 0x4 PUT_4
        case $t7 0x5 PUT_5
        case $t7 0x6 PUT_6
        case $t7 0x7 PUT_7
        case $t7 0x8 PUT_8
        case $t7 0x9 PUT_9
        case $t7 0xA PUT_A
        case $t7 0xB PUT_B
        case $t7 0xC PUT_C
        case $t7 0xD PUT_D
        case $t7 0xE PUT_E
        case $t7 0xF PUT_F
        # no default, these are the only valid values
        PUT_0: li $a0 CHAR_HEX_0
        case_break PUT_END
        PUT_1: li $a0 CHAR_HEX_1
        case_break PUT_END
        PUT_2: li $a0 CHAR_HEX_2
        case_break PUT_END
        PUT_3: li $a0 CHAR_HEX_3
        case_break PUT_END
        PUT_4: li $a0 CHAR_HEX_4
        case_break PUT_END
        PUT_5: li $a0 CHAR_HEX_5
        case_break PUT_END
        PUT_6: li $a0 CHAR_HEX_6
        case_break PUT_END
        PUT_7: li $a0 CHAR_HEX_7
        case_break PUT_END
        PUT_8: li $a0 CHAR_HEX_8
        case_break PUT_END
        PUT_9: li $a0 CHAR_HEX_9
        case_break PUT_END
        PUT_A: li $a0 CHAR_HEX_A
        case_break PUT_END
        PUT_B: li $a0 CHAR_HEX_B
        case_break PUT_END
        PUT_C: li $a0 CHAR_HEX_C
        case_break PUT_END
        PUT_D: li $a0 CHAR_HEX_D
        case_break PUT_END
        PUT_E: li $a0 CHAR_HEX_E
        case_break PUT_END
        PUT_F: li $a0 CHAR_HEX_F
        case_break PUT_END

        PUT_END:
        move $a1 $t2
        move $a2 $t3
        jal putChar_atXY

        # next screen column
        addi $t2 $t2 1
        # next hexit
        addi $t4 $t4 1
        # next mask
        srl $t5 $t5 4
        # next shamt
        subi $t6 $t6 4
        j screen_update_hexit_loop
    screen_update_hexit_loop_end: # }}}
    # restore $sp
    lw $ra 0($sp)
    addi $sp $sp 4
    jr $ra # }}}

.include "procs_board.mips"
# .include "procs_mars.mips"

error:
    # 0x00000000, also my halt code, easy to distinguish
    sll $0 $0 0
    # stay stuck
    j error
