# requires prog.mips
# requires instr.mips

.eqv DATA_START 0x10010000
.eqv TEXT_START 0x00400000

# macros for pc
.data
pc: .word 0 # **instruction = *text-address
progbase: .word 0 # **instruction = *text-address

.macro reset_pc # $t0
    li $t0 TEXT_START
    sw $t0 pc
.end_macro

.macro l_pc (%reg) # %reg
    lw %reg pc
.end_macro

.macro s_pc (%reg)
    sw %reg pc
.end_macro

.macro l_instr (%reg) # %reg, $at
    l_pc %reg
    subi %reg %reg TEXT_START
    lw $at progbase
    add %reg %reg $at
    # %reg = Mem[Mem[pc] - TEXT_START + Mem[progbase]]
    # assume pc word-aligned
    lw %reg 0(%reg)
.end_macro

# macros to load/store registers, data
# - for all data-based addresses (sw, lw), we subtract DATA_START and address
#   relative to data
# - for all text-based address (bt, jt, j addr), we subtract TEXT_START and
#   address relative to the start of program-memory (which varies!)
# - whenever rs/rd/rt == 29, forward to actual $sp (automatic b/c l_reg, s_reg)
#   - for consistency, the above will also write to (but not read from) rf[29]
# - whenever sw/lw involves 29, forward to actual $sp (assumes correct stack
#   usage! Large offsets with register $sp may cause problems. So |imm| ≤ 16;
#   i.e., local usage, non-large stack-size, |stack| ≤ 2^16)
#   - in fact, the stack starts at 0x10011000, with 1024 words of memory, *some
#   of which is the data memory!* so |stack| << 1024!
.eqv DATA_SIZE 16
.eqv REG_Z 0
.eqv REG_AT 1
.eqv REG_V0 2
.eqv REG_V1 3
.eqv REG_A0 4
.eqv REG_A1 5
.eqv REG_A2 6
.eqv REG_A3 7
.eqv REG_T0 8
.eqv REG_T1 9
.eqv REG_T2 10
.eqv REG_T3 11
.eqv REG_T4 12
.eqv REG_T5 13
.eqv REG_T6 14
.eqv REG_T7 15
.eqv REG_S0 16
.eqv REG_S1 17
.eqv REG_S2 18
.eqv REG_S3 19
.eqv REG_S4 20
.eqv REG_S5 21
.eqv REG_S6 22
.eqv REG_S7 23
.eqv REG_T8 24
.eqv REG_T9 25
.eqv REG_K0 26
.eqv REG_K1 27
.eqv REG_GP 28
.eqv REG_SP 29
.eqv REG_FP 30
.eqv REG_RA 31

.data
# 32 0-initialized words
rf: .word 0:32
# interpreted-programs get DATA_SIZE words for data (but this is nowhere
# enforced! so a bug could cause serious data corruption)
data: .word 0:DATA_SIZE

.macro reset_mem # $t0, $t1
    reset_rf: li $t0 0
    rf_loop:
        bgei $t0 32 reset_data
        sll $t1 $t0 2
        sw $0 rf($t1)
        addi $t0 $t0 1
        j rf_loop
    reset_data: li $t0 0
    data_loop:
        bgei $t0 DATA_SIZE end
        sll $t1 $t0 2
        sw $0 data($t1)
        addi $t0 $t0 1
        j data_loop
    end:
.end_macro

# in _reg macros, %reg stands for a register containing a register number (0-31)
# this in contrast to all other macros, where %reg is a register name, usually
# for storing the results of the macro
.macro l_reg (%reg, %out) # %reg, %out
    case %reg REG_Z always_zero
    case %reg REG_SP do_sp
    case %reg REG_FP do_fp
    case default
    always_zero:
        add %out $0 $0
        case_break end
    do_sp:
        add %out $0 $sp
        # no fallthrough, in case rf[sp] is not correct
        case_break end
    do_fp:
        add %out $0 $fp
        # no fallthrough, in case rf[fp] is not correct
        case_break end
    default:
        # word-align memory address
        sll %reg %reg 2
        lw %out rf(%reg)
    end:
.end_macro

.macro s_reg (%reg, %in) # %reg, $sp
    # cannot write to $0
    case %reg REG_Z skip_zero
    case %reg REG_SP do_sp
    case %reg REG_FP do_fp
    case default
    skip_zero:
        case_break end
    do_sp:
        add $sp $0 %in
        # fallthrough
        j default
    do_fp:
        add $fp $0 %in
        # fallthrough
        j default
    default:
        # word-align memory address
        sll %reg %reg 2
        sw %in rf(%reg)
    end:
.end_macro

.macro l_data (%addr, %rs, %reg) # %addr, %rs, %reg
    case %rs REG_SP do_sp
    case %rs REG_FP do_fp
    case default
    do_sp:
        add %addr %addr $sp
        lw %reg 0(%addr)
        case_break end
    do_fp:
        add %addr %addr $fp
        lw %reg 0(%addr)
        case_break end
    default:
        l_reg %rs %rs
        add %addr %addr %rs
        subi %addr %addr DATA_START
        lw %reg data(%addr)
    end:
.end_macro

.macro s_data (%addr, %rs, %reg) # %addr, %rs, %reg
    case %rs REG_SP do_sp
    case %rs REG_FP do_fp
    case default
    do_sp:
        add %addr %addr $sp
        sw %reg 0(%addr)
        case_break end
    do_fp:
        add %addr %addr $fp
        sw %reg 0(%addr)
        case_break end
    default:
        l_reg %rs %rs
        add %addr %addr %rs
        subi %addr %addr DATA_START
        sw %reg data(%addr)
    end:
.end_macro

# target computations
# all are absolute, and are in the text-segment (i.e., ≥ TEXT_START)
# l_instr takes care of loading from pc relative to progbase, assuming pc is
# absolute in the text-segment
.macro bt (%instr, %reg) # %reg
    sign_ext_imm %instr %reg
    sll %reg %reg 2
    l_pc $at
    add %reg %reg $at
    addi %reg %reg 4
.end_macro

.macro jt (%instr, %reg) # %reg
    rs %instr %reg
    l_reg %reg %reg
.end_macro

.macro j_addr (%instr, %pc, %reg) # %pc, %reg
    # {0…,instr[25:0],2'b00}
    addr %instr %reg
    # pc[31:28]
    andi %pc %pc 0xF0000000
    # {pc[31:28],instr[25:0],2'b00}
    add %reg %reg %pc
.end_macro
