# programming macros
.include "prog.mips"

# constant definitions (opcodes, funcs, etc.)
# macros for extracting register-numbers, etc.
.include "instr.mips"

# macros for accessing memory, PC, simulated registers
.include "mem.mips"

# # IO facilities, esp. as macros?
# .include "io.mips"

# # assembled programs in labeled .data blocks
# .include "<sample_mips>.hex"
.include "mips/iter-fact-12.hex" # iterfact12
# # â€¦

# main program
.text
menu:
    # hardcoding my only example for now
    la $t0 iterfact12
    sw $t0 progbase
    jal interpreter
    # for mars only
    j mars_end

interpreter:
    reset_pc
    reset_mem
    interpreter_loop: # {{{
        l_instr $s0
        # halt when instruction is 0x00000000
        beq $s0 $0 halt

        opcode $s0 $s1
        case $s1 OP_LW DO_LW
        case $s1 OP_SW DO_SW
        case $s1 OP_ADDI DO_ADDI
        case $s1 OP_ADDIU DO_ADDIU
        case $s1 OP_SLTI DO_SLTI
        case $s1 OP_SLTIU DO_SLTIU
        case $s1 OP_ORI DO_ORI
        case $s1 OP_LUI DO_LUI
        case $s1 OP_ANDI DO_ANDI
        case $s1 OP_XORI DO_XORI
        case $s1 OP_BEQ DO_BEQ
        case $s1 OP_BNE DO_BNE
        case $s1 OP_J DO_J
        case $s1 OP_JAL DO_JAL
        case $s1 0 DO_R
        case op_default

        DO_LW: # {{{
            sign_ext_imm $s0 $t0
            rs $s0 $t1
            l_data $t0 $t1 $t2
            rt $s0 $t0
            s_reg $t0 $t2

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_SW: # {{{
            sign_ext_imm $s0 $t0
            rs $s0 $t1
            rt $s0 $t2
            l_reg $t2 $t2
            s_data $t0 $t1 $t2

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_ADDI: # {{{
            sign_ext_imm $s0 $t0
            rs $s0 $t1
            l_reg $t1 $t1
            add $t0 $t0 $t1
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_ADDIU: # {{{
            sign_ext_imm $s0 $t0
            rs $s0 $t1
            l_reg $t1 $t1
            addu $t0 $t0 $t1
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_SLTI: # {{{
            sign_ext_imm $s0 $t0
            rs $s0 $t1
            l_reg $t1 $t1
            slt $t0 $t1 $t0
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_SLTIU: # {{{
            sign_ext_imm $s0 $t0
            rs $s0 $t1
            l_reg $t1 $t1
            sltu $t0 $t1 $t0
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_ORI: # {{{
            zero_ext_imm $s0 $t0
            rs $s0 $t1
            l_reg $t1 $t1
            or $t0 $t0 $t1
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_LUI: # {{{
            zero_ext_imm $s0 $t0
            sll $t0 $t0 16
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_ANDI: # {{{
            zero_ext_imm $s0 $t0
            rs $s0 $t1
            l_reg $t1 $t1
            and $t0 $t0 $t1
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_XORI: # {{{
            zero_ext_imm $s0 $t0
            rs $s0 $t1
            l_reg $t1 $t1
            xor $t0 $t0 $t1
            rt $s0 $t1
            s_reg $t1 $t0

            l_pc $t0
            addi $t0 $t0 4
            s_pc $t0
            case_break op_end # }}}
        DO_BEQ: # {{{
            case_break op_end # }}}
        DO_BNE: # {{{
            case_break op_end # }}}
        DO_J: # {{{
            case_break op_end # }}}
        DO_JAL: # {{{
            case_break op_end # }}}

        DO_R: # {{{
            funct $s0 $s1
            case $s1 FUNC_ADD DO_ADD
            case $s1 FUNC_ADDU DO_ADDU
            case $s1 FUNC_SUB DO_SUB
            case $s1 FUNC_AND DO_AND
            case $s1 FUNC_OR DO_OR
            case $s1 FUNC_XOR DO_XOR
            case $s1 FUNC_NOR DO_NOR
            case $s1 FUNC_SLT DO_SLT
            case $s1 FUNC_SLTU DO_SLTU
            case $s1 FUNC_SLL DO_SLL
            case $s1 FUNC_SLLV DO_SLLV
            case $s1 FUNC_SRL DO_SRL
            case $s1 FUNC_SRLV DO_SRLV
            case $s1 FUNC_SRA DO_SRA
            case $s1 FUNC_SRAV DO_SRAV
            case $s1 FUNC_JR DO_JR
            case $s1 FUNC_JALR DO_JALR
            case r_default

            DO_ADD: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                add $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_ADDU: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                addu $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SUB: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                sub $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_AND: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                and $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_OR: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                or $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_XOR: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                xor $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_NOR: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                nor $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SLT: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                slt $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SLTU: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                sltu $t0 $t0 $t1
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SLL: # {{{
                shamt $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                # sllv because we don't know the shamt ($t0)
                sllv $t0 $t1 $t0
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SLLV: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                sllv $t0 $t1 $t0
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SRL: # {{{
                shamt $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                srlv $t0 $t1 $t0
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SRLV: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                srlv $t0 $t1 $t0
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SRA: # {{{
                shamt $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                srav $t0 $t1 $t0
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_SRAV: # {{{
                rs $s0 $t0
                l_reg $t0 $t0
                rt $s0 $t1
                l_reg $t1 $t1
                srav $t0 $t1 $t0
                rd $s0 $t1
                s_reg $t1 $t0

                l_pc $t0
                addi $t0 $t0 4
                s_pc $t0
                case_break r_end # }}}
            DO_JR: # {{{
                jt $s0 $t0
                s_pc $t0
                case_break r_end # }}}
            DO_JALR: # {{{
                # store PC + 4 in $ra
                l_pc $t0
                addi $t0 $t0 4
                li $t1 REG_RA
                s_reg $t1 $t0
                j DO_JR # }}}

            r_default:
                j error
            r_end:
            case_break op_end # }}}

        op_default:
            j error
        op_end:
        j interpreter_loop # }}}

    halt:
    jr $ra

error:
    # 0x00000000, also my halt code, easy to distinguish
    sll $0 $0 $0

mars_end:
